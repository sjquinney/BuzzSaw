package BuzzSaw::Types; # -*-perl-*-
use strict;
use warnings;

# $Id$
# $Source:$
# $Revision$
# $HeadURL$
# $Date$

our $VERSION = '@LCFG_VERSION@';

use UNIVERSAL::require;

use MooseX::Types -declare => [qw(BuzzSawDB BuzzSawParser
                                  BuzzSawDataSource BuzzSawDataSourceList
                                  BuzzSawFilter BuzzSawFilterList)];
use MooseX::Types::Moose qw(ArrayRef HashRef Str);

sub create_new_object {
  my ( $modbase, $modname, @args ) = @_;

  if ( $modname !~ m/^\Q$modbase\E::/ ) {
    $modname = join '::', $modbase, $modname;
  }

  $modname->require or die $UNIVERSAL::require::ERROR;

  if ( scalar @args == 1 && ref $args[0] eq 'ARRAY' ) {
    @args = @{$args[0]};
  }

  return $modname->new(@args);
}

# Parser

role_type BuzzSawParser, { role => 'BuzzSaw::Parser' };

coerce BuzzSawParser,
  from Str,
  via { create_new_object( 'BuzzSaw::Parser', $_ ) };

# Filter

role_type BuzzSawFilter, { role => 'BuzzSaw::Filter' };

coerce BuzzSawFilter,
  from Str,
  via { create_new_object( 'BuzzSaw::Filter', $_ ) };

subtype BuzzSawFilterList,
  as ArrayRef[BuzzSawFilter];

coerce BuzzSawFilterList,
  from ArrayRef,
  via { [ map { to_BuzzSawFilter($_) } @{$_} ] };

# DB

class_type BuzzSawDB, { class => 'BuzzSaw::DB' };

coerce BuzzSawDB,
  from Str,
  via { BuzzSaw::DB->new_with_config($_) };

coerce BuzzSawDB,
  from HashRef,
  via { BuzzSaw::DB->new($_) };

# DataSource

role_type BuzzSawDataSource, { role => 'BuzzSaw::DataSource' };

coerce BuzzSawDataSource,
  from Str,
  via { create_new_object( 'BuzzSaw::DataSource', $_ ) };

coerce BuzzSawDataSource,
  from ArrayRef,
  via { create_new_object( 'BuzzSaw::DataSource', @{$_} ) };

subtype BuzzSawDataSourceList,
  as ArrayRef[BuzzSawDataSource];

coerce BuzzSawDataSourceList,
  from ArrayRef,
  via { [ map { to_BuzzSawDataSource($_) } @{$_} ] };

1;
__END__
