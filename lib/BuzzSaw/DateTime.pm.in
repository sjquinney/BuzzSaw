package BuzzSaw::DateTime;
use strict;
use warnings;

use base 'DateTime';

use Date::Parse ();
use DateTime::Duration ();

sub from_date_string {
    my ( $class, $date_string ) = @_;

    my $now = $class->now();

    # Ensure we are using the current local timezone
    $now->set_time_zone('local');

    my $dt;
    if ( $date_string eq 'now' ) {
        $dt = $now;
    } elsif ( $date_string eq 'today' ) {
        $dt = $now->truncate( to => 'day' );
        $dt->set_second(1);
    } elsif ( $date_string eq 'recent' ) {
        my $dur = DateTime::Duration->new( minutes => 10 );
        $dt = $now - $dur;
    } elsif ( $date_string eq 'yesterday' ) {
        $dt = $now->truncate( to => 'day' );
        $dt->set_second(1);
        my $dur = DateTime::Duration->new( days => 1 );
        $dt = $now - $dur;
    } elsif ( $date_string =~ m/^this-(week|month|year)$/ ) {
        $dt = $now->truncate( to => $1 );
        $dt->set_second(1);
    } elsif ( $date_string eq 'week-ago' ) {
        my $dur = DateTime::Duration->new( days => 7 );
        $dt = $now - $dur;
    } else { # throw it at Date::Parse
        my $time_from_epoch = Date::Parse::str2time($date_string);
        $dt = $class->from_epoch( epoch => $time_from_epoch );
        $dt->set_time_zone('local');
    }

    return $dt;
}

1;

__END__
