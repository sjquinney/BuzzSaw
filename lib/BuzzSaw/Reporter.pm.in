package BuzzSaw::Reporter;
use strict;
use warnings;

use BuzzSaw::DateTime ();
use YAML::Syck ();

use Readonly;

Readonly my $ONE_HOUR => 60 * 60;
Readonly my $ONE_DAY  => $ONE_HOUR * 24;
Readonly my $ONE_WEEK => $ONE_DAY * 7;

use Moose;

has 'hourly' => (
  traits  => ['Array'],
  is      => 'ro',
  isa     => 'ArrayRef[BuzzSaw::Report]',
  default => sub { [] },
  handles => {
    hourly_list => 'elements',
  },
);

has 'daily' => (
  traits  => ['Array'],
  is      => 'ro',
  isa     => 'ArrayRef[BuzzSaw::Report]',
  default => sub { [] },
  handles => {
    daily_list => 'elements',
  },
);

has 'weekly' => (
  traits  => ['Array'],
  is      => 'ro',
  isa     => 'ArrayRef[BuzzSaw::Report]',
  default => sub { [] },
  handles => {
    weekly_list => 'elements',
  },
);

has 'monthly' => (
  traits  => ['Array'],
  is      => 'ro',
  isa     => 'ArrayRef[BuzzSaw::Report]',
  default => sub { [] },
  handles => {
    monthly_list => 'elements',
  },
);

has 'runlog' => (
  is      => 'ro',
  isa     => 'Str',
  default =>  '/var/lib/buzzsaw/report.runlog.yml',
);

no Moose;
__PACKAGE__->meta->make_immutable;

sub load_runlog {
  my ($self) = @_;

  my $runlog = {};
  if ( -f $self->runlog ) {
    $runlog = YAML::Syck::LoadFile($self->runlog);
  }

  $runlog->{hourly} //= {};
  $runlog->{daily} //= {};
  $runlog->{weekly} //= {};
  $runlog->{monthly} //= {};

  return $runlog;
}

sub store_runlog {
  my ( $self, $runlog ) = @_;

  return YAML::Syck::DumpFile( $self->runlog, $runlog );
}

sub generate_reports {
  my ( $self, @reports ) = @_;

  if ( scalar @reports == 0 ) {
    @reports = qw(hourly daily weekly monthly);
  }

  for my $report (@reports) {
    if ( $report eq 'hourly' ) {
      $self->run_hourly_reports;
    } elsif ( $report eq 'daily' ) {
      $self->run_daily_reports;
    } elsif ( $report eq 'weekly' ) {
      $self->run_weekly_reports;
    } elsif ( $report eq 'monthly' ) {
      $self->run_monthly_reports;
    } else {
      warn "Ignoring unsupported report type '$report'\n";
    }
  }

  return;
}

sub run_hourly_reports {
  my ($self) = @_;

  my $runlog = $self->load_runlog;

  $self->_run_reports( $ONE_HOUR, $runlog->{hourly}, $self->hourly_list );

  $self->store_runlog($runlog);

  return;
}

sub run_daily_reports {
  my ($self) = @_;

  my $runlog = $self->load_runlog;

  $self->_run_reports( $ONE_DAY, $runlog->{daily}, $self->daily_list );

  $self->store_runlog($runlog);

  return;
}

sub run_weekly_reports {
  my ($self) = @_;

  my $runlog = $self->load_runlog;

  $self->_run_reports( $ONE_WEEK, $runlog->{weekly}, $self->weekly_list );

  $self->store_runlog($runlog);

  return;
}

sub run_monthly_reports {
  my ($self) = @_;

  my $runlog = $self->load_runlog;

  my $now = BuzzSaw::DateTime->now();
  $now->set_time_zone('local');

  my $dur = DateTime::Duration->new( months => 1 );
  my $then = $now - $dur;
  my $one_month = $now->epoch() - $then->epoch();

  $self->_run_reports( $one_month, $runlog->{monthly}, $self->monthly_list );

  $self->store_runlog($runlog);

  return;
}

sub _run_reports {
  my ( $self, $duration, $runlog, @report_list ) = @_;

  for my $report (@report_list) {
    my $name = $report->name;

    my $needs_run = 0;
    if ( exists $runlog->{$name} && defined $runlog->{$name} ) {
      my $now  = time;
      my $prev = $runlog->{$name};

      if ( $now - $prev > $duration ) {
        $needs_run = 1;
      }

    } else {
      $needs_run = 1;
    }

    if ($needs_run) {
      warn "Running $name report\n";
      $report->generate();
      $runlog->{$name} = time;
    }

  }

  return;
}

1;
__END__
