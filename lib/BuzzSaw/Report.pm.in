package BuzzSaw::Report;
use strict;
use warnings;

use BuzzSaw::DateTime;
use Template;

use Moose;
use Moose::Util::TypeConstraints;

class_type('BuzzSaw::DateTime');

coerce 'BuzzSaw::DateTime'
    => from 'Int'
    => via { my $dt = BuzzSaw::DateTime->from_epoch( epoch => $_ );
             $dt->set_time_zone('local');
             return $dt; };

coerce 'BuzzSaw::DateTime'
    => from 'Str'
    => via { BuzzSaw::DateTime->from_date_string($_) };

coerce 'BuzzSaw::DateTime'
    => from 'HashRef'
    => via { BuzzSaw::DateTime->new( time_zone => 'local', %{$_} ) };

has 'catalogue' => (
    is       => 'ro',
    isa      => 'BuzzSaw::DB',
    required => 1,
    default  => sub { BuzzSaw::DB->new_with_config() },
    lazy     => 1,
);

has 'template' => (
  is       => 'ro',
  isa      => 'Str',
  required => 1,
  default => sub {
    my $class = shift @_;
    my $mod = ( split /::/, $class->meta->name )[-1];
    my $template = lc($mod) . '.tt';
    return $template;
  },
);

has 'tmpldir' => (
    is       => 'ro',
    isa      => 'ArrayRef[Str]',
    required => 1,
    default  => sub { ['/usr/share/buzzsaw/templates/reports',
                       '/usr/share/buzzsaw/templates'] },
);

has 'start' => (
    is       => 'ro',
    isa      => 'BuzzSaw::DateTime',
    required => 1,
    coerce   => 1,
    default  => sub { 'yesterday' },
);

has 'end' => (
    is       => 'ro',
    isa      => 'BuzzSaw::DateTime',
    required => 1,
    coerce   => 1,
    default  => sub { 'today' },
);

has 'tags' => (
  traits    => ['Array'],
  is        => 'ro',
  isa       => 'ArrayRef[Str]',
  default   => sub { [] },
  handles   => {
    has_tags  => 'count',
    tags_list => 'elements',
  },
);

no Moose;
__PACKAGE__->meta->make_immutable;

sub BUILD {
    my ($self) = @_;

    my $diff = $self->end - $self->start;
    if ( $diff->is_negative ) {
        die "Error: Start date/time is later than end date/time\n"
    }
    return;
}

sub generate {
  my ($self) = @_;

  my @events = $self->find_events();

  my %vars = $self->process_events(@events);

  $self->process_template( \%vars, \@events );

  return;
}

sub process_template {
  my ( $self, $vars, $events ) = @_;

  my $tt = Template->new(
    {
      INCLUDE_PATH => $self->tmpldir,
    }
  ) or die "$Template::ERROR\n";

  $vars->{events} = $events;
  $vars->{params} = {
      start => $self->start,
      end   => $self->end,
      tags  => $self->tags,
  };

  $tt->process( $self->template, $vars )
    or die $tt->error();

  return;
}

sub process_events {
  my ( $self, @events ) = @_;

  my %vars;


  return %vars;
}

sub find_events {
  my ($self) = @_;

  my $schema = $self->catalogue->schema;
  my $events_rs = $schema->resultset('Event');

  # Find events within the required time range

  my $dtf = $schema->storage->datetime_parser;

  my %query = (
    logtime => [
      -and => { '>=', $dtf->format_datetime($self->start) },
              { '<=', $dtf->format_datetime($self->end)   },
    ],
  );

  my %attrs = ( order_by => 'logtime' );

  if ( $self->has_tags ) {

    # join onto the tag table and search for events with the specified tags

    $attrs{join}     = 'tags';
    $attrs{prefetch} = 'tags';

    $query{'tags.name'} = { -in => $self->tags };
  }

  my @events = $events_rs->search( \%query, \%attrs );

  return @events;
}

1;
__END__
